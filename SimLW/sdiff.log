# Auto generated configuration file				# Auto generated configuration file
# using: 							# using: 
# Revision: 1.19 						# Revision: 1.19 
# Source: /local/reps/CMSSW/CMSSW/Configuration/Applications/	# Source: /local/reps/CMSSW/CMSSW/Configuration/Applications/
# with command line options: SimLW/Sim/python/MyHadronizer.py |	# with command line options: SimLW/Sim/python/myHadronizer.py
import FWCore.ParameterSet.Config as cms			import FWCore.ParameterSet.Config as cms



process = cms.Process('SIM')					process = cms.Process('SIM')

# import of standard configurations				# import of standard configurations
process.load('Configuration.StandardSequences.Services_cff')	process.load('Configuration.StandardSequences.Services_cff')
process.load('SimGeneral.HepPDTESSource.pythiapdt_cfi')		process.load('SimGeneral.HepPDTESSource.pythiapdt_cfi')
process.load('FWCore.MessageService.MessageLogger_cfi')		process.load('FWCore.MessageService.MessageLogger_cfi')
process.load('Configuration.EventContent.EventContent_cff')	process.load('Configuration.EventContent.EventContent_cff')
process.load('SimGeneral.MixingModule.mixNoPU_cfi')		process.load('SimGeneral.MixingModule.mixNoPU_cfi')
process.load('Configuration.StandardSequences.GeometryRecoDB_	process.load('Configuration.StandardSequences.GeometryRecoDB_
process.load('Configuration.Geometry.GeometrySimDB_cff')	process.load('Configuration.Geometry.GeometrySimDB_cff')
process.load('Configuration.StandardSequences.MagneticField_c	process.load('Configuration.StandardSequences.MagneticField_c
process.load('Configuration.StandardSequences.Generator_cff')	process.load('Configuration.StandardSequences.Generator_cff')
process.load('IOMC.EventVertexGenerators.VtxSmearedRealistic2	process.load('IOMC.EventVertexGenerators.VtxSmearedRealistic2
process.load('GeneratorInterface.Core.genFilterSummary_cff')	process.load('GeneratorInterface.Core.genFilterSummary_cff')
process.load('Configuration.StandardSequences.SimIdeal_cff')	process.load('Configuration.StandardSequences.SimIdeal_cff')
process.load('Configuration.StandardSequences.EndOfProcess_cf	process.load('Configuration.StandardSequences.EndOfProcess_cf
process.load('Configuration.StandardSequences.FrontierConditi	process.load('Configuration.StandardSequences.FrontierConditi

process.maxEvents = cms.untracked.PSet(				process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(10)				    input = cms.untracked.int32(10)
)								)

# Input source							# Input source
process.source = cms.Source("LHESource",			process.source = cms.Source("LHESource",
    fileNames = cms.untracked.vstring('file:LWSM.lhe')		    fileNames = cms.untracked.vstring('file:LWSM.lhe')
)								)

process.options = cms.untracked.PSet(				process.options = cms.untracked.PSet(

)								)

# Production Info						# Production Info
process.configurationMetadata = cms.untracked.PSet(		process.configurationMetadata = cms.untracked.PSet(
    annotation = cms.untracked.string('SimLW/Sim/python/MyHad |	    annotation = cms.untracked.string('SimLW/Sim/python/myHad
    name = cms.untracked.string('Applications'),		    name = cms.untracked.string('Applications'),
    version = cms.untracked.string('$Revision: 1.19 $')		    version = cms.untracked.string('$Revision: 1.19 $')
)								)

# Output definition						# Output definition

process.RAWSIMoutput = cms.OutputModule("PoolOutputModule",	process.RAWSIMoutput = cms.OutputModule("PoolOutputModule",
    SelectEvents = cms.untracked.PSet(				    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('generation_step')		        SelectEvents = cms.vstring('generation_step')
    ),								    ),
    compressionAlgorithm = cms.untracked.string('LZMA'),	    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(1),			    compressionLevel = cms.untracked.int32(1),
    dataset = cms.untracked.PSet(				    dataset = cms.untracked.PSet(
        dataTier = cms.untracked.string('GEN-SIM'),		        dataTier = cms.untracked.string('GEN-SIM'),
        filterName = cms.untracked.string('')			        filterName = cms.untracked.string('')
    ),								    ),
    eventAutoFlushCompressedSize = cms.untracked.int32(209715	    eventAutoFlushCompressedSize = cms.untracked.int32(209715
    fileName = cms.untracked.string('gensimLW.root'),		    fileName = cms.untracked.string('gensimLW.root'),
    outputCommands = process.RAWSIMEventContent.outputCommand	    outputCommands = process.RAWSIMEventContent.outputCommand
    splitLevel = cms.untracked.int32(0)				    splitLevel = cms.untracked.int32(0)
)								)

# Additional output definition					# Additional output definition

# Other statements						# Other statements
process.genstepfilter.triggerConditions=cms.vstring("generati	process.genstepfilter.triggerConditions=cms.vstring("generati
from Configuration.AlCa.GlobalTag import GlobalTag		from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag, '106X_mcRun2 |	#process.GlobalTag = GlobalTag(process.GlobalTag, '106X_mcRun
							      >	process.GlobalTag.connect = cms.string('sqlite_file:/cvmfs/cm
							      >	process.GlobalTag.globaltag = "106X_mcRun2_asymptotic_v17"
							      >
							      >
							      >	process.generator = cms.EDFilter("Pythia8HadronizerFilter",
							      >	    PythiaParameters = cms.PSet(
							      >	        parameterSets = cms.vstring(
							      >	            'processParameters', 
							      >	            'pythiaMyParameters'
							      >	        ),
							      >	        processParameters = cms.vstring(
							      >	            'Tune:pp 5', 
							      >	            'PDF:pSet = 5'
							      >	        ),
							      >	        pythiaMyParameters = cms.vstring(
							      >	            '556:new = lwe- lwe+ 2 -3 0 200.0 0.0 200.0 200.0
							      >	            '556:isResonance=off', 
							      >	            '556:isVisible=off', 
							      >	            '556:addChannel= 1 1.0 100 23 11', 
							      >	            '23:isResonance=off', 
							      >	            '23:oneChannel= 1   0.1540492    0        1\t   -
							      >	            '23:addChannel= 1   0.1194935    0        2\t   -
							      >	            '23:addChannel= 1   0.1540386    0        3\t   -
							      >	            '23:addChannel= 1   0.1193325    0        4\t   -
							      >	            '23:addChannel= 1   0.1523269    0        5\t   -
							      >	        )
							      >	    ),
							      >	    UseExternalGenerators = cms.untracked.bool(True),
							      >	    comEnergy = cms.double(8000.0),
							      >	    filterEfficiency = cms.untracked.double(1.0),
							      >	    maxEventsToPrint = cms.untracked.int32(0),
							      >	    pythiaHepMCVerbosity = cms.untracked.bool(True),
							      >	    pythiaPylistVerbosity = cms.untracked.int32(1)
							      >	)
							      >

# Path and EndPath definitions					# Path and EndPath definitions
process.generation_step = cms.Path(process.pgen)		process.generation_step = cms.Path(process.pgen)
process.simulation_step = cms.Path(process.psim)		process.simulation_step = cms.Path(process.psim)
process.genfiltersummary_step = cms.EndPath(process.genFilter	process.genfiltersummary_step = cms.EndPath(process.genFilter
process.endjob_step = cms.EndPath(process.endOfProcess)		process.endjob_step = cms.EndPath(process.endOfProcess)
process.RAWSIMoutput_step = cms.EndPath(process.RAWSIMoutput)	process.RAWSIMoutput_step = cms.EndPath(process.RAWSIMoutput)

# Schedule definition						# Schedule definition
process.schedule = cms.Schedule(process.generation_step,proce	process.schedule = cms.Schedule(process.generation_step,proce
from PhysicsTools.PatAlgos.tools.helpers import associatePatA	from PhysicsTools.PatAlgos.tools.helpers import associatePatA
associatePatAlgosToolsTask(process)				associatePatAlgosToolsTask(process)
							      >	# filter all path with the production filter sequence
							      >	for path in process.paths:
							      >		getattr(process,path).insert(0, process.generator)

# customisation of the process.					# customisation of the process.

# Automatic addition of the customisation function from Confi	# Automatic addition of the customisation function from Confi
from Configuration.DataProcessing.Utils import addMonitoring 	from Configuration.DataProcessing.Utils import addMonitoring 

#call to customisation function addMonitoring imported from C	#call to customisation function addMonitoring imported from C
process = addMonitoring(process)				process = addMonitoring(process)

# End of customisation functions				# End of customisation functions

# Customisation from command line				# Customisation from command line

# Add early deletion of temporary data products to reduce pea	# Add early deletion of temporary data products to reduce pea
from Configuration.StandardSequences.earlyDeleteSettings_cff 	from Configuration.StandardSequences.earlyDeleteSettings_cff 
process = customiseEarlyDelete(process)				process = customiseEarlyDelete(process)
# End adding early deletion					# End adding early deletion
